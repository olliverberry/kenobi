name: Build and push images to Amazon ECR

on:
  push:
    branches:
      - main

env:
  ECR_FRONTEND_REPOSITORY: ${{ vars.ECR_FRONTEND_REPOSITORY }}
  ECR_SERVER_REPOSITORY: ${{ vars.ECR_SERVER_REPOSITORY }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push-server:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push server image to Amazon ECR
        id: build-image
        working-directory: ./server
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_SERVER_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_SERVER_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_SERVER_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  build-and-push-frontend:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push frontend image to Amazon ECR
        id: build-image
        working-directory: ./frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          NEXT_PUBLIC_LD_CLIENT_SDK_ID: ${{ secrets.NEXT_PUBLIC_LD_CLIENT_SDK_ID }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build --build-arg NEXT_PUBLIC_LD_CLIENT_SDK_ID=$NEXT_PUBLIC_LD_CLIENT_SDK_ID \
            -t $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-to-ecs:
    runs-on: ubuntu-latest
    needs: [build-and-push-server, build-and-push-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Inject taskRoleArn and executionRoleArn
        run: |
          jq \
            --arg task "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole" \
            --arg exec "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole" \
            '.taskRoleArn = $task | .executionRoleArn = $exec' \
            .deployment/task-definition.json > .deployment/task-definition.with-roles.json

      - name: Render Amazon ECS task definition
        id: render-frontend-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .deployment/task-definition.with-roles.json
          container-name: frontend
          image: ${{ steps.login-ecr.outputs.registry }}/${{ needs.build-and-push-frontend.outputs.image }}
          environment-variables: |
            ENV_PORT=3001
            AUTH_TRUST_HOST=true
            AUTH_URL=http://localhost:3001
            BACKEND_URL=http://server:3000
            NEXT_PUBLIC_LD_CLIENT_SDK_ID=${{ secrets.NEXT_PUBLIC_LD_CLIENT_SDK_ID }}
          secrets: |
            AUTH_SECRET=${{ secrets.AWS_AUTH_SECRET }}
            LD_SERVER_SDK_SECRET=${{ secrets.AWS_LD_SERVER_SDK_SECRET }}

      - name: Render Amazon ECS task definition
        id: render-server-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-frontend-container.outputs.task-definition }}
          container-name: server
          image: ${{ steps.login-ecr.outputs.registry }}/${{ needs.build-and-push-server.outputs.image }}

      - name: Deploy Amazon ECS service
        id: deploy-service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-server-container.outputs.task-definition }}
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
